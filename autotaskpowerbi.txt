let
    // NB Making calls to multiple instances from the same Power BI Dash can cause problems with authentication
    // check data source security
    // By Terran Brown with help from the Stackoverflow community and others


    // Common parameters
    queryStringApiIntegrationCodevar = "xxxxx",
    queryStringUserNamevar = "xxxxx",
    queryStringUserSecretvar = "xxxxx",
    queryStringContentTypevar = "application/json",
    
    headers = [
        #"ApiIntegrationCode"=queryStringApiIntegrationCodevar,
        #"UserName"=queryStringUserNamevar,
        #"Secret"=queryStringUserSecretvar,
        #"Content-Type"=queryStringContentTypevar
    ],

    apiUrl = "https://webservices16.autotask.net/ATServicesRest/V1.0/Roles/query",
    apiUrlnew = "https://webservices16.autotask.net/atservicesrest/V1.0/Roles/query/next",
    searchFilter = "{""filter"":[{""op"":""gte"",""field"":""id"",""value"":""0""}]}",

    // Functions
    converturl = (data as text) as text => 
        let
            out = Uri.Parts("http://contoso?a=" & Text.Replace(data, "&", "%26"))[Query][a]
        in
            out,

    gatherpagingdata = (data as list, uri as text, headers, searchFilter) =>
        let
            // Get the Data
            // Replace Percent URL-encoded characters
            //https://webservices4.autotask.net/ATServicesRest/V1.0/Projects/query?paging={"filter":[{"op":"gte","field":"id","value":"0"}]}&search={"filter":[{"op":"gte","field":"id","value":"0"}]}/next?paging={"pageSize":500,"previousIds":[3],"nextIds":[593]}&search={"filter":[{"op":"gte","field":"id","value":"0"}]}
            nextpagefunc = converturl(uri) as text,        
            textBeforePaging = Text.BeforeDelimiter(nextpagefunc, "?paging="),
            textAfterPagingandBeforesearch = Text.BetweenDelimiters(nextpagefunc, "/next?paging=", "&search="),
            //textAfterPagingandBeforesearch = try Text.BetweenDelimiters(nextpagefunc, "/next?paging=", "&search=") as text otherwise Text.BetweenDelimiters(nextpagefunc, "query?paging=", "&search=") as text,
            textAfterPagingandsearchEquals = Text.BetweenDelimiters(nextpagefunc, "&search=", "/next?paging"),
            
            // pull out search filter
            newReq = Json.Document(Web.Contents(apiUrlnew, [Headers=headers, Query=[paging=textAfterPagingandBeforesearch , search=textAfterPagingandsearchEquals]])),
            newdata = newReq[items],

            // Add that data to rolling aggregate
            updatedData = List.Combine({data, newdata}),

            // Check for the next URL using function
            nextPageUrl = newReq[pageDetails][nextPageUrl],

            // If there's no next page of data, return. If there is, call @gatherpagingdata again to get more data
            result = if nextPageUrl <> null then @gatherpagingdata(updatedData, nextPageUrl, headers , searchFilter) else updatedData
        in
            result,

    // Execute
    //initReq = try Json.Document(Web.Contents(apiUrl, [Headers=headers, Query=[search=searchFilter]])) otherwise error "Failed to retrieve data from the API 1st Pass",
    initReq = try Json.Document(Web.Contents(apiUrl, [Headers=headers, Query=[paging=searchFilter, search=searchFilter ]])) otherwise error "Failed to retrieve data from the API 1st Pass",
    initData = initReq[items],

    // Before we call gather(), we want to see if it's even necessary.
    // First request returns only one page? Return.
    // OutputList = try if initReq[pageDetails][nextPageUrl] = null then initData else gather(initData, BaseURI) otherwise error uri,
    uri = initReq[pageDetails][nextPageUrl],

    // Decode the extracted value
    // Replace Percent URL-encoded characters
    nextpagefunc = converturl(uri),

    outputList = 
        if initReq[pageDetails][nextPageUrl] = null then 
            initData 
        else 
            gatherpagingdata(initData, uri, headers , searchFilter),

    // Then place records into a table. This will expand all columns available in the record.
    expand = Table.FromRecords(outputList),
    #"Sorted Rows" = Table.Sort(expand,{{"id", Order.Descending}})
in
    expand
